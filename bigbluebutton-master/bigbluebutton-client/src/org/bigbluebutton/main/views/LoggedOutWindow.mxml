<?xml version="1.0" encoding="utf-8"?>

<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" 
    title="{ResourceUtil.getInstance().getString('bbb.logout.title')}" showCloseButton="false" creationComplete="init()"
    verticalScrollPolicy="off" horizontalScrollPolicy="off"
    x="168" y="86" layout="vertical" width="400" height="110" horizontalAlign="center">
	<mx:Script>
		<![CDATA[
			import flash.net.navigateToURL;
			
			import mx.managers.PopUpManager;
			
			import org.as3commons.logging.api.ILogger;
			import org.as3commons.logging.api.getClassLogger;
			import org.bigbluebutton.core.BBB;
			import org.bigbluebutton.core.UsersUtil;
			import org.bigbluebutton.core.managers.UserManager;
			import org.bigbluebutton.main.model.users.events.ConnectionFailedEvent;
			import org.bigbluebutton.util.i18n.ResourceUtil;

			private static const LOGGER:ILogger = getClassLogger(LoggedOutWindow);

			[Bindable]
			private var message:String;

			private var urlLoader:URLLoader;

			private function init():void {
				addEventListener(Event.CLOSE, onUserLoggedOutWindowClose);
			}

			private function callSignOut():void {
				var logoutURL:String = BBB.getSignoutURL();
				var request:URLRequest = new URLRequest(logoutURL);
				LOGGER.debug("Log out url: " + logoutURL);
				request.method = URLRequestMethod.GET;
				urlLoader = new URLLoader();
				// If the redirect value is set to false handleComplete will be triggered
				urlLoader.addEventListener(Event.COMPLETE, handleComplete);
				urlLoader.addEventListener(IOErrorEvent.IO_ERROR, handleRedirectError);
				urlLoader.load(request);
			}

			private function exitApplication():void {
				if (!UserManager.getInstance().getConference().isBreakout) {
					navigateToURL(new URLRequest(BBB.getLogoutURL()), "_self");
				} else {
					ExternalInterface.call("window.close");
				}
			}

			private function handleComplete(e:Event):void {
				PopUpManager.removePopUp(this);
				exitApplication();
			}

			private function handleRedirectError(e:IOErrorEvent):void {
				var logData:Object = UsersUtil.initLogData();
				logData.tags = ["logout"];
				logData.message = "Log out redirection returned with error.";
				LOGGER.error(JSON.stringify(logData));
				PopUpManager.removePopUp(this);
				exitApplication();
			}

			private function onUserLoggedOutWindowClose(e:Event):void {
				LOGGER.debug("Closing UserLoggedOutWindow");
				PopUpManager.removePopUp(this);
			}

			public function setReason(reason:String):void {
				LOGGER.debug("Received ConnectionFailedEvent with reason: " + reason);
				switch (reason) {
					case ConnectionFailedEvent.APP_SHUTDOWN:
						message = ResourceUtil.getInstance().getString('bbb.logout.appshutdown');
						break;
					case ConnectionFailedEvent.ASYNC_ERROR:
						message = ResourceUtil.getInstance().getString('bbb.logout.asyncerror');
						break;
					case ConnectionFailedEvent.CONNECTION_CLOSED:
						message = ResourceUtil.getInstance().getString('bbb.logout.connectionclosed');
						break;
					case ConnectionFailedEvent.CONNECTION_FAILED:
						message = ResourceUtil.getInstance().getString('bbb.logout.connectionfailed');
						break;
					case ConnectionFailedEvent.CONNECTION_REJECTED:
						message = ResourceUtil.getInstance().getString('bbb.logout.rejected');
						break;
					case ConnectionFailedEvent.INVALID_APP:
						message = ResourceUtil.getInstance().getString('bbb.logout.invalidapp');
						break;
					case ConnectionFailedEvent.UNKNOWN_REASON:
						message = ResourceUtil.getInstance().getString('bbb.logout.unknown');
						break;
					case ConnectionFailedEvent.USER_EJECTED_FROM_MEETING:
						message = ResourceUtil.getInstance().getString('bbb.logout.ejectedFromMeeting');
						break;
					case ConnectionFailedEvent.USER_LOGGED_OUT:
						message = ResourceUtil.getInstance().getString('bbb.logout.usercommand');
						break;
				}
				if (message && UserManager.getInstance().getConference().isBreakout) {
					message += "\n" + ResourceUtil.getInstance().getString('bbb.logour.breakoutRoomClose');
				}
			}
		]]>
	</mx:Script>
	<mx:VBox width="100%" height="100%" horizontalAlign="center">
		<mx:Text text="{message}" textAlign="center"/>
		<mx:Button id="okBtn" label="{ResourceUtil.getInstance().getString('bbb.logout.button.label')}" click="callSignOut()"/>
	</mx:VBox>
</mx:TitleWindow> 
