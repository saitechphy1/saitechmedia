<?xml version="1.0" encoding="utf-8"?>

<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2015 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<mx:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx"
				xmlns:mate="http://mate.asfusion.com/"
				width="630" height="650"
				close="onCloseClicked()"
				visible="false"
				showCloseButton="false">

	<fx:Script>
		<![CDATA[
			import com.asfusion.mate.events.Dispatcher;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.managers.PopUpManager;
			
			import org.bigbluebutton.core.managers.UserManager;
			import org.bigbluebutton.main.events.BreakoutRoomEvent;
			import org.bigbluebutton.main.model.users.BBBUser;
			import org.bigbluebutton.util.i18n.ResourceUtil;

			[Bindable]
			private var roomsProvider:Array;

			private var dispatcher:Dispatcher;

			[Bindable]
			private var mode:String;
			
			[Bindable]
			private var recordingEnabled:Boolean;

			private static var assignement : Dictionary;

			private function onCloseClicked():void {
				PopUpManager.removePopUp(this);
			}

			/**
			 * Dispatches a BreakoutRoomEvent to start creating breakout rooms
			 */
			private function createBreakoutRooms():void {
				// Will be used to check that all the new breakout room contains at least one users
				var totalUsers:int;
				var event:BreakoutRoomEvent = new BreakoutRoomEvent(BreakoutRoomEvent.CREATE_BREAKOUT_ROOMS);
				// event.meetingId is filled in the event handler for BreakoutRoomEvent in UserService class
				event.rooms = new Array();
				var parentMeetingName:String = UserManager.getInstance().getConference().meetingName;
				var roomResource:String = ResourceUtil.getInstance().getString('bbb.users.breakout.room');
				for (var i:int = 0; i < (roomsCombo.selectedIndex + 2); i++) {
					var users:Array = BreakoutList(roomsContainer.getChildAt(i)).users.source;
					totalUsers += users.length;
					var room:Object = new Object();
					room.users = new Array();
					room.sequence = i + 1;
					room.name = parentMeetingName + " (" + roomResource + " - " + room.sequence.toString() + ")";
					for (var j:int = 0; j < users.length; j++) {
						room.users.push(users[j].userID);
					}
					event.rooms.push(room);
				}
				if (totalUsers > 0) {
					event.durationInMinutes = durationStepper.value;
					event.record = recordCheckbox.selected;
					dispatcher.dispatchEvent(event);
					storeAssignement();
					PopUpManager.removePopUp(this);
				} else {
					Alert.show(ResourceUtil.getInstance().getString('bbb.users.breakout.insufficientUsers'));
				}
			}

			/**
			 * Dispatches a BreakoutRoomEvent to send breakout rooms join URL invitations
			 */
			private function inviteUsersToBreakoutRooms():void {
				var list:BreakoutList;
				var user:BBBUser;
				var usersInvited:Boolean = false;
				for (var i:int; i < roomsContainer.numChildren - 1; i++) {
					list = roomsContainer.getChildAt(i) as BreakoutList;
					for (var u:int = 0; u < list.users.length; u++) {
						user = list.users.getItemAt(u) as BBBUser;
						if (user.breakoutRooms.length == 0) {
							usersInvited ||= true;
							var event:BreakoutRoomEvent = new BreakoutRoomEvent(BreakoutRoomEvent.REQUEST_BREAKOUT_JOIN_URL);
							event.userId = user.userID;
							event.breakoutMeetingId = UserManager.getInstance().getConference().getBreakoutRoomBySequence(i + 1).externalMeetingId;
							dispatcher.dispatchEvent(event);
						}
					}
				}
				if (usersInvited) {
					PopUpManager.removePopUp(this);
				} else {
					Alert.show(ResourceUtil.getInstance().getString('bbb.users.breakout.insufficientUsers'));
				}
			}

			protected function assignUsersForCreation():void {
				var originalUsers:ArrayCollection = UserManager.getInstance().getConference().users;
				var users:ArrayCollection = new ArrayCollection();
				var me:BBBUser;
				// Copy users to avoid removing the references from the original ArrayCollection
				for (var l:int = 0; l < originalUsers.length; l++) {
					if (!UserManager.getInstance().getConference().amIThisUser(BBBUser(originalUsers[l]).userID)) {
						users.addItem(BBBUser.copy(originalUsers[l]));
					} // Put the current user to the unassigned box because he is the moderator
					else {
						me = originalUsers[l];
					}
				}
				var rooms:int = roomsCombo.selectedIndex + 2;
				var perRoom:int = users.length / rooms;
				var remaining:int = users.length % rooms;
				var user:BBBUser;
				roomsContainer.removeAllChildren();
				for (var r:int = 0; r < rooms; r++) {
					var list:BreakoutList = roomsContainer.addChild(new BreakoutList()) as BreakoutList;
					list.users = new ArrayCollection();
					list.roomName = ResourceUtil.getInstance().getString('bbb.users.breakout.room') + " " + (r + 1).toString();
					list.usersList.accessibilityName = ResourceUtil.getInstance().getString('bbb.users.breakout.room') + " " + (r + 1).toString();
					for (var i:int = 0; i < perRoom; i++) {
						list.users.addItem(users.removeItemAt(Math.floor(Math.random() * users.length)) as BBBUser);
					}
				}
				for (var j:int = 0; j < remaining; j++) {
					BreakoutList(roomsContainer.getChildAt(j)).users.addItem(users.removeItemAt(Math.floor(Math.random() * users.length)) as BBBUser);
				}
				var unassignedList:BreakoutList = roomsContainer.addChild(new BreakoutList()) as BreakoutList;
				unassignedList.users = new ArrayCollection([me]);
				unassignedList.roomName = ResourceUtil.getInstance().getString('bbb.users.breakout.notAssigned');
				unassignedList.usersList.accessibilityName = ResourceUtil.getInstance().getString('bbb.users.breakout.notAssigned');
				unassignedList.notAssignedUsers = true;
				startButton.enabled = true;
			}

			protected function loadAssignement():void {
				var rooms:int = assignement['rooms'];
				roomsCombo.selectedIndex = assignement['rooms'] - 2;
				recordCheckbox.selected = assignement['record'];
				durationStepper.value = assignement['duration'];
				var user:BBBUser;
				var currentUsers:ArrayCollection = UserManager.getInstance().getConference().users;
				// Create breakout rooms boxes
				for (var r:int = 1; r <= rooms; r++) {
					var list:BreakoutList = roomsContainer.addChild(new BreakoutList()) as BreakoutList;
					list.users = new ArrayCollection();
					list.roomName = ResourceUtil.getInstance().getString('bbb.users.breakout.room') + " " + (r).toString();
					list.usersList.accessibilityName = ResourceUtil.getInstance().getString('bbb.users.breakout.room') + " " + (r).toString();
				}
				// Load user assignment from the previous action
				var unassignedUsers:ArrayCollection = new ArrayCollection();
				for (var u:int = 0; u < currentUsers.length; u++) {
					user = currentUsers.getItemAt(u) as BBBUser;
					if (assignement.hasOwnProperty(user.userID)) {
						BreakoutList(roomsContainer.getChildAt(assignement[user.userID])).users.addItem(BBBUser.copy(user));
					} else {
						unassignedUsers.addItem(BBBUser.copy(user));
					}
				}
				// Create not assigned users list
				createUnassignedList(unassignedUsers);
			}

			protected function assignUsersForInvitation():void {
				var originalUsers:ArrayCollection = UserManager.getInstance().getConference().users;
				var users:ArrayCollection = new ArrayCollection();
				// Copy users to avoid removing the references from the original ArrayCollection
				for (var l:int = 0; l < originalUsers.length; l++) {
					users.addItem(BBBUser.copy(originalUsers[l]));
				}
				// Create breakout rooms lists
				var rooms:int = UserManager.getInstance().getConference().breakoutRooms.length;
				var user:BBBUser;
				roomsContainer.removeAllChildren();
				for (var r:int = 0; r < rooms; r++) {
					var list:BreakoutList = roomsContainer.addChild(new BreakoutList()) as BreakoutList;
					list.roomName = ResourceUtil.getInstance().getString('bbb.users.breakout.room') + " " + (r + 1).toString()
					list.usersList.accessibilityName = ResourceUtil.getInstance().getString('bbb.users.breakout.room') + " " + (r + 1).toString()
					list.users = new ArrayCollection();
					list.mode = mode;
				}
				var unassignedUsers:ArrayCollection = new ArrayCollection();
				for (var j:int = 0; j < users.length; j++) {
					user = users[j] as BBBUser;
					if (user.breakoutRooms.length > 0) {
						for (var b:int = 0; b < user.breakoutRooms.length; b++) {
							BreakoutList(roomsContainer.getChildAt(user.breakoutRooms[b] - 1)).users.addItem(user as BBBUser);
						}
					} else {
						unassignedUsers.addItem(user);
					}
				}
				createUnassignedList(unassignedUsers);
				startButton.enabled = true;
			}

			private function createUnassignedList(dataProvider:ArrayCollection):void {
				var unassignedList:BreakoutList = roomsContainer.addChild(new BreakoutList()) as BreakoutList;
				unassignedList.users = dataProvider;
				unassignedList.roomName = ResourceUtil.getInstance().getString('bbb.users.breakout.notAssigned');
				unassignedList.usersList.accessibilityName = ResourceUtil.getInstance().getString('bbb.users.breakout.notAssigned');
				unassignedList.notAssignedUsers = true;
			}

			private function storeAssignement():void {
				assignement = new Dictionary(true);
				assignement['rooms'] = roomsCombo.selectedIndex + 2;
				assignement['record'] = recordCheckbox.selected;
				assignement['duration'] = durationStepper.value;
				for (var r:int = 0; r < assignement['rooms']; r++) {
					var users:ArrayCollection = BreakoutList(roomsContainer.getChildAt(r)).users;
					for (var u:int = 0; u < users.length; u++) {
						// We store pairs { userID : roomNumber } to be easier to check later
						assignement[BBBUser(users[u]).userID] = r;
					}
				}
			}

			public function initCreateBreakoutRooms(mode:String, record:Boolean):void {
				dispatcher = new Dispatcher();
				roomsProvider = new Array();
				this.mode = mode;
				this.recordingEnabled = record;
				for (var i:int = 2; i <= 5; i++) {
					roomsProvider.push(i.toString() + " " + ResourceUtil.getInstance().getString('bbb.users.breakout.rooms'));
				}
				roomsCombo.selectedIndex = 0;
				if (this.mode == "create") {
					startButton.label = ResourceUtil.getInstance().getString('bbb.users.breakout.start');
					textArea.text = ResourceUtil.getInstance().getString('bbb.users.breakout.breakoutRooms');
					if (assignement == null) {
						assignUsersForCreation();
					} else {
						loadAssignement();
					}
					visible = true;
				} else {
					startButton.label = ResourceUtil.getInstance().getString('bbb.users.breakout.invite');
					roomsBox.visible = durationBox.visible = recordBox.visible =
						roomsBox.includeInLayout = durationBox.includeInLayout = recordBox.includeInLayout = false;
					textArea.text = ResourceUtil.getInstance().getString('bbb.users.breakout.updateBreakoutRooms');
					assignUsersForInvitation();
					visible = true;
				}
			}
		]]>
	</fx:Script>

	<mx:VBox width="100%" height="100%" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5">
		<mx:TextArea width="100%" borderSkin="{null}" editable="false"
					 id="textArea" text="{ResourceUtil.getInstance().getString('bbb.users.breakout.breakoutRooms')}"
					 styleName="breakoutRoomSettingTitleStyle"/>
		
		<mx:Canvas width="100%" styleName="breakoutTipBox" backgroundColor="0xcccccc">
			<mx:Text horizontalCenter="0" text="{ResourceUtil.getInstance().getString('bbb.users.breakout.dragAndDropToolTip')}"/>
		</mx:Canvas>
		
		<mx:HBox id="roomsBox" paddingTop="20" width="100%">
			<mx:HBox width="50%" height="100%" horizontalAlign="left" verticalAlign="middle">
				<mx:Label text="{ResourceUtil.getInstance().getString('bbb.users.breakout.rooms')}" />
				<mx:ComboBox id="roomsCombo" width="80%" change="{assignUsersForCreation()}" dataProvider="{roomsProvider}" 
							 accessibilityName="{ResourceUtil.getInstance().getString('bbb.users.breakout.roomsCombo.accessibilityName')}" />
			</mx:HBox>
			<!-- <mx:Button paddingLeft="20" width="50%" id="randomAssignBtn"
					   label="{ResourceUtil.getInstance().getString('bbb.users.breakout.randomAssign')}" click="assignUsers()"/> -->
		</mx:HBox>
		
		<mx:HBox id="durationBox" width="100%" paddingTop="12">
			<mx:Label text="{ResourceUtil.getInstance().getString('bbb.users.breakout.timeLimit')}" />
			<mx:NumericStepper id="durationStepper" value="15" minimum="1" maximum="600" 
							   accessibilityName="{ResourceUtil.getInstance().getString('bbb.users.breakout.durationStepper.accessibilityName')}"/>
			<mx:Label text="{ResourceUtil.getInstance().getString('bbb.users.breakout.minutes')}"/>
		</mx:HBox>
		
		<mx:HBox id="recordBox" width="100%" paddingTop="12" visible="{recordingEnabled}">
		    <mx:Label text="{ResourceUtil.getInstance().getString('bbb.users.breakout.record')}"/>
			<mx:CheckBox id="recordCheckbox"
						 accessibilityName="{ResourceUtil.getInstance().getString('bbb.users.breakout.recordCheckbox.accessibilityName')}"/>
		</mx:HBox>
		<mx:Tile id="roomsContainer" styleName="roomsContainer" width="100%" height="100%"/>
			
		<mx:HBox width="100%" horizontalAlign="right" verticalGap="15">
			<mx:Button id="startButton"
					   click="this.mode == 'create' ? createBreakoutRooms() : inviteUsersToBreakoutRooms()"/>
			<mx:Button label="{ResourceUtil.getInstance().getString('bbb.users.breakout.close')}" click="onCloseClicked()"/>
		</mx:HBox>
	</mx:VBox>
	
</mx:TitleWindow>
