<?xml version="1.0" encoding="utf-8"?>

<!--

     BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

     Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

     This program is free software; you can redistribute it and/or modify it under the
     terms of the GNU Lesser General Public License as published by the Free Software
     Foundation; either version 3.0 of the License, or (at your option) any later
     version.

     BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
     PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

     You should have received a copy of the GNU Lesser General Public License along
     with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<MDIWindow xmlns="flexlib.mdi.containers.*"
           xmlns:mx="http://www.adobe.com/2006/mxml"
           width="600"
           height="400"
           initialize="init()"
           creationComplete="onCreationComplete()"
           implements="org.bigbluebutton.common.IBbbModuleWindow"
           xmlns:mate="http://mate.asfusion.com/"
           title="{    ResourceUtil.getInstance().getString('bbb.screenshareView.title')    }"
           showCloseButton="false"
           resize="fitToWindow()">

    <mate:Listener type="{    ViewStreamEvent.STOP    }" method="onStopViewStreamEvent" />
    <mate:Listener type="{    LocaleChangeEvent.LOCALE_CHANGED    }" method="localeChanged" />
    <mate:Listener type="{    BBBEvent.RECONNECT_DISCONNECTED_EVENT    }" method="handleDisconnectedEvent" />

    <mx:Script>
        <![CDATA[
      import com.asfusion.mate.events.Dispatcher;     
      import flexlib.mdi.events.MDIWindowEvent;      
      import mx.core.UIComponent;      
      import org.bigbluebutton.common.Images;
      import org.bigbluebutton.common.events.LocaleChangeEvent;
      import org.bigbluebutton.core.managers.UserManager;
      import org.bigbluebutton.main.api.JSLog;
      import org.bigbluebutton.main.views.MainCanvas;
      import org.bigbluebutton.modules.screenshare.events.CursorEvent;
      import org.bigbluebutton.modules.screenshare.events.StartedViewingEvent;
      import org.bigbluebutton.modules.screenshare.events.ViewStreamEvent;
      import org.bigbluebutton.modules.screenshare.events.ViewWindowEvent;
      import org.bigbluebutton.modules.screenshare.model.ScreenshareModel;
      import org.bigbluebutton.modules.screenshare.model.ScreenshareOptions;
      import org.bigbluebutton.util.i18n.ResourceUtil;
      import org.as3commons.logging.api.ILogger;
      import org.as3commons.logging.api.getClassLogger;
      import org.bigbluebutton.core.managers.ReconnectionManager;
      import org.bigbluebutton.main.events.BBBEvent;
      import org.bigbluebutton.modules.screenshare.services.red5.Connection;
      import org.bigbluebutton.core.UsersUtil;
      
      private static const LOG:String = "SC::ScreenshareViewWIndow - ";
      private static const LOGGER:ILogger = getClassLogger(ScreenshareViewWindow);
      
			private var screenHeight:Number = Capabilities.screenResolutionY;
			private var screenWidth:Number = Capabilities.screenResolutionX;
						
			private var images:Images = new Images();
			[Bindable] public var fitToWidthIcon:Class = images.magnifier;
			[Bindable] public var fitToActualSizeIcon:Class = images.mag_reset;
					
      private var streamAvailable:Boolean = false;
      
			private var video:Video;
			private var ns:NetStream;
			private var videoHolder:UIComponent = new UIComponent();
			private var streamId:String;
			private var videoHeight:Number = 1;
			private var videoWidth:Number = 1;
			
			private static const VIDEO_WIDTH_PADDING:int = 7;
			private static const VIDEO_HEIGHT_PADDING:int = 65;

			// The following code block is to deal with a bug in FLexLib 
			// with MDI windows not responding well to being maximized
			private var savedWindowWidth:Number;
			private var savedWindowHeight:Number;
			private var savedX:Number;
			private var savedY:Number;
			private var isMaximized:Boolean = false;
			private var connection:Connection;
      
			[Bindable] private var baseIndex:int;
			[Bindable] private var dsOptions:ScreenshareOptions;
									
			private function init():void{
				dsOptions = new ScreenshareOptions();
				baseIndex = dsOptions.baseTabIndex;
			}
									
			private function onCreationComplete():void{
        viewScreenshareStream();
        
				videoHolder.addChild(video);				
				this.addChild(videoHolder);
				videoHolder.percentWidth = 100;
				videoHolder.percentHeight = 100;
				addEventListener(MDIWindowEvent.RESIZE_END, onResizeEndEvent);				
				fitToActualSize();				
				maximize();
				
				resourcesChanged();
				
				titleBarOverlay.tabIndex = baseIndex;
				minimizeBtn.tabIndex = baseIndex+1;
				maximizeRestoreBtn.tabIndex = baseIndex+2;
				closeBtn.tabIndex = baseIndex+3;
               
        var logData:Object = UsersUtil.initLogData();
        logData.tags = ["screenshare"];
        logData.width = videoWidth;
        logData.height = videoHeight;
        logData.streamId = streamId;
        
        LOGGER.info(JSON.stringify(logData));
			}
			
			private function onResizeEndEvent(event:MDIWindowEvent):void {
				if (event.window == this && streamAvailable) {
					fitToWindow();
				}
			}
					
			public function startVideo(connection:Connection):void{
        var logData:Object = new Object();
        logData.width = videoWidth;
        logData.height = videoHeight;
        logData.streamId = streamId;
        
        JSLog.debug(LOG + "startVideo", logData);
        
				this.connection = connection;
			}
			            
      private function viewScreenshareStream():void{
        videoWidth = ScreenshareModel.getInstance().width;
        videoHeight = ScreenshareModel.getInstance().height;
        streamId = ScreenshareModel.getInstance().streamId;
        
        var logData:Object = UsersUtil.initLogData();
        logData.tags = ["screenshare"];
        logData.width = videoWidth;
        logData.height = videoHeight;
        logData.streamId = streamId;
        
        LOGGER.info(JSON.stringify(logData));
        
        ns = new NetStream(connection.getConnection());
        ns.addEventListener( NetStatusEvent.NET_STATUS, onNetStatus );
        ns.addEventListener(AsyncErrorEvent.ASYNC_ERROR, onAsyncError);
        ns.client = this;
        ns.bufferTime = 0;
        ns.receiveVideo(true);
        ns.receiveAudio(false);
        
        video = new Video(videoWidth, videoHeight);
        video.width = videoWidth;
        video.height = videoHeight;
        video.smoothing = true;
        video.attachNetStream(ns);
        ns.play(streamId);	
        this.title = "Viewing Remote Desktop";
        streamAvailable = true;
        
        fitToWindow();
      }
      
      public function onMetaData(info:Object):void{
        trace("metadata: width=" + info.width + " height=" + info.height);
        
        var logData:Object = UsersUtil.initLogData();
        logData.tags = ["screenshare"];
        logData.width = info.width;
        logData.height = info.height;
        
        LOGGER.info(JSON.stringify(logData));
      }
      
      protected function updateButtonsPosition():void {
        if (this.width < bottomBar.width) {
          bottomBar.visible = false;
        }
        
        if (bottomBar.visible == false) {
          bottomBar.y = bottomBar.x = 0;
        } else {
          bottomBar.y = (this.height - bottomBar.height) / 2;
          bottomBar.x = (this.width - bottomBar.width) / 2;
        }
      }
      
			public function stopViewing():void {
				ns.close();
				closeWindow();				
			}
			
			private function onStopViewStreamEvent(event:ViewStreamEvent):void {
				stopViewing();
			}
						
			private function onAsyncError(e:AsyncErrorEvent):void{
        LOGGER.debug("asyncerror " + e.toString());
        var logData:Object = UsersUtil.initLogData();
        logData.tags = ["screenshare"];
        logData.message = "asyncerror";
        LOGGER.info(JSON.stringify(logData));
			}
			
			private function onNetStatus(e:NetStatusEvent):void{
        var logData:Object = UsersUtil.initLogData();
        logData.tags = ["screenshare"];
        logData.stream = streamId;
        
				switch(e.info.code){
  				case "NetStream.Play.Start":
            logData.message = "NetStream.Publish.Start for broadcast stream " + streamId;
            LOGGER.info(JSON.stringify(logData));
  					break;
  				case "NetStream.Play.UnpublishNotify":
            logData.message = "NetStream.Play.UnpublishNotify for broadcast stream " + streamId;
            LOGGER.info(JSON.stringify(logData));
  					stopViewing();
  					break;
				}
			}
			
			public function getPrefferedPosition():String{
				return MainCanvas.DESKTOP_SHARING_VIEW;
			}
												
			/**
			 * resizes the desktop sharing video to fit to this window
			 */
			private function fitToWindow():void{
        if (!streamAvailable) return;
        
				if (videoIsSmallerThanWindow()) {
					fitWindowToVideo();
				}
				
				// Ignore if we are displaying the actual size of the video
				if (! btnActualSize.selected) {
					fitVideoToWindow();
				}
			}
			
			private function fitVideoToWindow():void {
				if (this.width < this.height) {
					fitToWidthAndAdjustHeightToMaintainAspectRatio();				
				} else {
					fitToHeightAndAdjustWidthToMaintainAspectRatio();
				}				
			}
						
			private function fitWindowToVideo():void {	
				video.width = videoWidth;
				videoHolder.width = videoWidth;
				video.height = videoHeight;
				videoHolder.height = videoHeight;			
				this.height = videoHeight + VIDEO_HEIGHT_PADDING;
				this.width = videoWidth + VIDEO_WIDTH_PADDING;
			}
			
			private function videoIsSmallerThanWindow():Boolean {
				return (videoHeight < this.height) && (videoWidth < this.width);
			}
			
		
			private function fitToWidthAndAdjustHeightToMaintainAspectRatio():void {
					video.width = this.width - VIDEO_WIDTH_PADDING;
					videoHolder.width = video.width;
					// Maintain aspect-ratio
					video.height = (videoHeight * video.width) / videoWidth;
					videoHolder.height = video.height;
					this.height = video.height + VIDEO_HEIGHT_PADDING;					
			}
				
			private function fitToHeightAndAdjustWidthToMaintainAspectRatio():void {
					video.height = this.height - VIDEO_HEIGHT_PADDING;
					videoHolder.height = video.height;
					// Maintain aspect-ratio
					video.width = (videoWidth * video.height) / videoHeight;
					videoHolder.width = video.width;
					this.width = video.width + VIDEO_WIDTH_PADDING;					
			}
								
			/**
			 * resizes the desktop sharing video to actual video resolution
			 */
			private function fitToActualSize():void{
				if (videoIsSmallerThanWindow()) {
					fitWindowToVideo();
				} else {
					video.width = videoWidth;
					videoHolder.width = videoWidth;
					video.height = videoHeight;
					videoHolder.height = videoHeight;
				}
			}
			
			private function determineHowToDisplayVideo():void {
				if (btnActualSize.selected) {
					fitToActualSize();			
					btnActualSize.toolTip = ResourceUtil.getInstance().getString('bbb.screenshareView.fitToWindow');	
					btnActualSize.label = ResourceUtil.getInstance().getString('bbb.screenshareView.fitToWindow');
				} else {
					fitToWindow();
					btnActualSize.toolTip = ResourceUtil.getInstance().getString('bbb.screenshareView.actualSize');
					btnActualSize.label = ResourceUtil.getInstance().getString('bbb.screenshareView.actualSize');
				}
			}
			
			private function closeWindow():void {
				dispatchEvent(new ViewWindowEvent(ViewWindowEvent.CLOSE));
			}
			
			override protected function resourcesChanged():void{
				super.resourcesChanged();
				this.title = ResourceUtil.getInstance().getString('bbb.screenshareView.title');
				
				if (windowControls != null) {
					minimizeBtn.toolTip = ResourceUtil.getInstance().getString("bbb.window.minimizeBtn.toolTip");
					minimizeBtn.accessibilityName = ResourceUtil.getInstance().getString("bbb.screenshareView.minimizeBtn.accessibilityName");

					maximizeRestoreBtn.toolTip = ResourceUtil.getInstance().getString("bbb.window.maximizeRestoreBtn.toolTip");
					maximizeRestoreBtn.accessibilityName = ResourceUtil.getInstance().getString("bbb.screenshareView.maximizeRestoreBtn.accessibilityName");

					closeBtn.toolTip = ResourceUtil.getInstance().getString("bbb.window.closeBtn.toolTip");
					closeBtn.accessibilityName = ResourceUtil.getInstance().getString("bbb.screenshareView.closeBtn.accessibilityName");
				}
			}
			
			private function localeChanged(e:Event):void{
				resourcesChanged();
			}
            
       public function handleDisconnectedEvent(event:BBBEvent):void {
          if (event.payload.type == ReconnectionManager.DESKSHARE_CONNECTION) {
            closeWindow();  
          }
      }
			
		]]>
    </mx:Script>

    <mx:HBox id="bottomBar" visible="true" height="30" horizontalAlign="center" paddingTop="0" paddingBottom="0" width="100%">
        <mx:Button id="btnActualSize"
                   paddingTop="0"
                   paddingBottom="0"
                   styleName="deskshareControlButtonStyle"
                   toggle="true"
                   click="determineHowToDisplayVideo()"
                   selected="false"
                   height="90%"
                   label="{    btnActualSize.selected ? ResourceUtil.getInstance().getString('bbb.screenshareView.fitToWindow') : ResourceUtil.getInstance().getString('bbb.screenshareView.actualSize')    }"
                   toolTip="{    btnActualSize.selected ? ResourceUtil.getInstance().getString('bbb.screenshareView.fitToWindow') : ResourceUtil.getInstance().getString('bbb.screenshareView.actualSize')    }"
                   tabIndex="{    baseIndex + 4    }" />
    </mx:HBox>
</MDIWindow>
